{"version":3,"sources":["../../../node_modules/@vidstack/react/prod/chunks/vidstack-BeT6vBOi.js"],"sourcesContent":["\"use client\"\n\nimport { listenEvent, effect, untrack, createScope, keysOf, onDispose, DOMEvent, peek } from './vidstack-CZgUA94N.js';\nimport { ListSymbol, TimeRange, RAFLoop } from './vidstack-D5Pzx_k5.js';\nimport { getCastSessionMedia, getCastContext, getCastSession, hasActiveCastSession, listenCastContextEvent, getCastErrorMessage } from './vidstack-CQQ1xKSy.js';\nimport 'react';\nimport '@floating-ui/dom';\n\nclass GoogleCastMediaInfoBuilder {\n  #info;\n  constructor(src) {\n    this.#info = new chrome.cast.media.MediaInfo(src.src, src.type);\n  }\n  build() {\n    return this.#info;\n  }\n  setStreamType(streamType) {\n    if (streamType.includes(\"live\")) {\n      this.#info.streamType = chrome.cast.media.StreamType.LIVE;\n    } else {\n      this.#info.streamType = chrome.cast.media.StreamType.BUFFERED;\n    }\n    return this;\n  }\n  setTracks(tracks) {\n    this.#info.tracks = tracks.map(this.#buildCastTrack);\n    return this;\n  }\n  setMetadata(title, poster) {\n    this.#info.metadata = new chrome.cast.media.GenericMediaMetadata();\n    this.#info.metadata.title = title;\n    this.#info.metadata.images = [{ url: poster }];\n    return this;\n  }\n  #buildCastTrack(track, trackId) {\n    const castTrack = new chrome.cast.media.Track(trackId, chrome.cast.media.TrackType.TEXT);\n    castTrack.name = track.label;\n    castTrack.trackContentId = track.src;\n    castTrack.trackContentType = \"text/vtt\";\n    castTrack.language = track.language;\n    castTrack.subtype = track.kind.toUpperCase();\n    return castTrack;\n  }\n}\n\nclass GoogleCastTracksManager {\n  #cast;\n  #ctx;\n  #onNewLocalTracks;\n  constructor(cast, ctx, onNewLocalTracks) {\n    this.#cast = cast;\n    this.#ctx = ctx;\n    this.#onNewLocalTracks = onNewLocalTracks;\n  }\n  setup() {\n    const syncRemoteActiveIds = this.syncRemoteActiveIds.bind(this);\n    listenEvent(this.#ctx.audioTracks, \"change\", syncRemoteActiveIds);\n    listenEvent(this.#ctx.textTracks, \"mode-change\", syncRemoteActiveIds);\n    effect(this.#syncLocalTracks.bind(this));\n  }\n  getLocalTextTracks() {\n    return this.#ctx.$state.textTracks().filter((track) => track.src && track.type === \"vtt\");\n  }\n  #getLocalAudioTracks() {\n    return this.#ctx.$state.audioTracks();\n  }\n  #getRemoteTracks(type) {\n    const tracks = this.#cast.mediaInfo?.tracks ?? [];\n    return type ? tracks.filter((track) => track.type === type) : tracks;\n  }\n  #getRemoteActiveIds() {\n    const activeIds = [], activeLocalAudioTrack = this.#getLocalAudioTracks().find((track) => track.selected), activeLocalTextTracks = this.getLocalTextTracks().filter((track) => track.mode === \"showing\");\n    if (activeLocalAudioTrack) {\n      const remoteAudioTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.AUDIO), remoteAudioTrack = this.#findRemoteTrack(remoteAudioTracks, activeLocalAudioTrack);\n      if (remoteAudioTrack) activeIds.push(remoteAudioTrack.trackId);\n    }\n    if (activeLocalTextTracks?.length) {\n      const remoteTextTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.TEXT);\n      if (remoteTextTracks.length) {\n        for (const localTrack of activeLocalTextTracks) {\n          const remoteTextTrack = this.#findRemoteTrack(remoteTextTracks, localTrack);\n          if (remoteTextTrack) activeIds.push(remoteTextTrack.trackId);\n        }\n      }\n    }\n    return activeIds;\n  }\n  #syncLocalTracks() {\n    const localTextTracks = this.getLocalTextTracks();\n    if (!this.#cast.isMediaLoaded) return;\n    const remoteTextTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.TEXT);\n    for (const localTrack of localTextTracks) {\n      const hasRemoteTrack = this.#findRemoteTrack(remoteTextTracks, localTrack);\n      if (!hasRemoteTrack) {\n        untrack(() => this.#onNewLocalTracks?.());\n        break;\n      }\n    }\n  }\n  syncRemoteTracks(event) {\n    if (!this.#cast.isMediaLoaded) return;\n    const localAudioTracks = this.#getLocalAudioTracks(), localTextTracks = this.getLocalTextTracks(), remoteAudioTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.AUDIO), remoteTextTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.TEXT);\n    for (const remoteAudioTrack of remoteAudioTracks) {\n      const hasLocalTrack = this.#findLocalTrack(localAudioTracks, remoteAudioTrack);\n      if (hasLocalTrack) continue;\n      const localAudioTrack = {\n        id: remoteAudioTrack.trackId.toString(),\n        label: remoteAudioTrack.name,\n        language: remoteAudioTrack.language,\n        kind: remoteAudioTrack.subtype ?? \"main\",\n        selected: false\n      };\n      this.#ctx.audioTracks[ListSymbol.add](localAudioTrack, event);\n    }\n    for (const remoteTextTrack of remoteTextTracks) {\n      const hasLocalTrack = this.#findLocalTrack(localTextTracks, remoteTextTrack);\n      if (hasLocalTrack) continue;\n      const localTextTrack = {\n        id: remoteTextTrack.trackId.toString(),\n        src: remoteTextTrack.trackContentId,\n        label: remoteTextTrack.name,\n        language: remoteTextTrack.language,\n        kind: remoteTextTrack.subtype.toLowerCase()\n      };\n      this.#ctx.textTracks.add(localTextTrack, event);\n    }\n  }\n  syncRemoteActiveIds(event) {\n    if (!this.#cast.isMediaLoaded) return;\n    const activeIds = this.#getRemoteActiveIds(), editRequest = new chrome.cast.media.EditTracksInfoRequest(activeIds);\n    this.#editTracksInfo(editRequest).catch((error) => {\n    });\n  }\n  #editTracksInfo(request) {\n    const media = getCastSessionMedia();\n    return new Promise((resolve, reject) => media?.editTracksInfo(request, resolve, reject));\n  }\n  #findLocalTrack(localTracks, remoteTrack) {\n    return localTracks.find((localTrack) => this.#isMatch(localTrack, remoteTrack));\n  }\n  #findRemoteTrack(remoteTracks, localTrack) {\n    return remoteTracks.find((remoteTrack) => this.#isMatch(localTrack, remoteTrack));\n  }\n  // Note: we can't rely on id matching because they will differ between local/remote. A local\n  // track id might not even exist.\n  #isMatch(localTrack, remoteTrack) {\n    return remoteTrack.name === localTrack.label && remoteTrack.language === localTrack.language && remoteTrack.subtype.toLowerCase() === localTrack.kind.toLowerCase();\n  }\n}\n\nclass GoogleCastProvider {\n  $$PROVIDER_TYPE = \"GOOGLE_CAST\";\n  scope = createScope();\n  #player;\n  #ctx;\n  #tracks;\n  #currentSrc = null;\n  #state = \"disconnected\";\n  #currentTime = 0;\n  #played = 0;\n  #seekableRange = new TimeRange(0, 0);\n  #timeRAF = new RAFLoop(this.#onAnimationFrame.bind(this));\n  #playerEventHandlers;\n  #reloadInfo = null;\n  #isIdle = false;\n  constructor(player, ctx) {\n    this.#player = player;\n    this.#ctx = ctx;\n    this.#tracks = new GoogleCastTracksManager(player, ctx, this.#onNewLocalTracks.bind(this));\n  }\n  get type() {\n    return \"google-cast\";\n  }\n  get currentSrc() {\n    return this.#currentSrc;\n  }\n  /**\n   * The Google Cast remote player.\n   *\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.RemotePlayer}\n   */\n  get player() {\n    return this.#player;\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastSession}\n   */\n  get session() {\n    return getCastSession();\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/chrome.cast.media.Media}\n   */\n  get media() {\n    return getCastSessionMedia();\n  }\n  /**\n   * Whether the current Google Cast session belongs to this provider.\n   */\n  get hasActiveSession() {\n    return hasActiveCastSession(this.#currentSrc);\n  }\n  setup() {\n    this.#attachCastContextEventListeners();\n    this.#attachCastPlayerEventListeners();\n    this.#tracks.setup();\n    this.#ctx.notify(\"provider-setup\", this);\n  }\n  #attachCastContextEventListeners() {\n    listenCastContextEvent(\n      cast.framework.CastContextEventType.CAST_STATE_CHANGED,\n      this.#onCastStateChange.bind(this)\n    );\n  }\n  #attachCastPlayerEventListeners() {\n    const Event2 = cast.framework.RemotePlayerEventType, handlers = {\n      [Event2.IS_CONNECTED_CHANGED]: this.#onCastStateChange,\n      [Event2.IS_MEDIA_LOADED_CHANGED]: this.#onMediaLoadedChange,\n      [Event2.CAN_CONTROL_VOLUME_CHANGED]: this.#onCanControlVolumeChange,\n      [Event2.CAN_SEEK_CHANGED]: this.#onCanSeekChange,\n      [Event2.DURATION_CHANGED]: this.#onDurationChange,\n      [Event2.IS_MUTED_CHANGED]: this.#onVolumeChange,\n      [Event2.VOLUME_LEVEL_CHANGED]: this.#onVolumeChange,\n      [Event2.IS_PAUSED_CHANGED]: this.#onPausedChange,\n      [Event2.LIVE_SEEKABLE_RANGE_CHANGED]: this.#onProgress,\n      [Event2.PLAYER_STATE_CHANGED]: this.#onPlayerStateChange\n    };\n    this.#playerEventHandlers = handlers;\n    const handler = this.#onRemotePlayerEvent.bind(this);\n    for (const type of keysOf(handlers)) {\n      this.#player.controller.addEventListener(type, handler);\n    }\n    onDispose(() => {\n      for (const type of keysOf(handlers)) {\n        this.#player.controller.removeEventListener(type, handler);\n      }\n    });\n  }\n  async play() {\n    if (!this.#player.isPaused && !this.#isIdle) return;\n    if (this.#isIdle) {\n      await this.#reload(false, 0);\n      return;\n    }\n    this.#player.controller?.playOrPause();\n  }\n  async pause() {\n    if (this.#player.isPaused) return;\n    this.#player.controller?.playOrPause();\n  }\n  getMediaStatus(request) {\n    return new Promise((resolve, reject) => {\n      this.media?.getStatus(request, resolve, reject);\n    });\n  }\n  setMuted(muted) {\n    const hasChanged = muted && !this.#player.isMuted || !muted && this.#player.isMuted;\n    if (hasChanged) this.#player.controller?.muteOrUnmute();\n  }\n  setCurrentTime(time) {\n    this.#player.currentTime = time;\n    this.#ctx.notify(\"seeking\", time);\n    this.#player.controller?.seek();\n  }\n  setVolume(volume) {\n    this.#player.volumeLevel = volume;\n    this.#player.controller?.setVolumeLevel();\n  }\n  async loadSource(src) {\n    if (this.#reloadInfo?.src !== src) this.#reloadInfo = null;\n    if (hasActiveCastSession(src)) {\n      this.#resumeSession();\n      this.#currentSrc = src;\n      return;\n    }\n    this.#ctx.notify(\"load-start\");\n    const loadRequest = this.#buildLoadRequest(src), errorCode = await this.session.loadMedia(loadRequest);\n    if (errorCode) {\n      this.#currentSrc = null;\n      this.#ctx.notify(\"error\", Error(getCastErrorMessage(errorCode)));\n      return;\n    }\n    this.#currentSrc = src;\n  }\n  destroy() {\n    this.#reset();\n    this.#endSession();\n  }\n  #reset() {\n    if (!this.#reloadInfo) {\n      this.#played = 0;\n      this.#seekableRange = new TimeRange(0, 0);\n    }\n    this.#timeRAF.stop();\n    this.#currentTime = 0;\n    this.#reloadInfo = null;\n  }\n  #resumeSession() {\n    const resumeSessionEvent = new DOMEvent(\"resume-session\", { detail: this.session });\n    this.#onMediaLoadedChange(resumeSessionEvent);\n    const { muted, volume, savedState } = this.#ctx.$state, localState = savedState();\n    this.setCurrentTime(Math.max(this.#player.currentTime, localState?.currentTime ?? 0));\n    this.setMuted(muted());\n    this.setVolume(volume());\n    if (localState?.paused === false) this.play();\n  }\n  #endSession() {\n    this.cast.endCurrentSession(true);\n    const { remotePlaybackLoader } = this.#ctx.$state;\n    remotePlaybackLoader.set(null);\n  }\n  #disconnectFromReceiver() {\n    const { savedState } = this.#ctx.$state;\n    savedState.set({\n      paused: this.#player.isPaused,\n      currentTime: this.#player.currentTime\n    });\n    this.#endSession();\n  }\n  #onAnimationFrame() {\n    this.#onCurrentTimeChange();\n  }\n  #onRemotePlayerEvent(event) {\n    this.#playerEventHandlers[event.type].call(this, event);\n  }\n  #onCastStateChange(data) {\n    const castState = this.cast.getCastState(), state = castState === cast.framework.CastState.CONNECTED ? \"connected\" : castState === cast.framework.CastState.CONNECTING ? \"connecting\" : \"disconnected\";\n    if (this.#state === state) return;\n    const detail = { type: \"google-cast\", state }, trigger = this.#createEvent(data);\n    this.#state = state;\n    this.#ctx.notify(\"remote-playback-change\", detail, trigger);\n    if (state === \"disconnected\") {\n      this.#disconnectFromReceiver();\n    }\n  }\n  #onMediaLoadedChange(event) {\n    const hasLoaded = !!this.#player.isMediaLoaded;\n    if (!hasLoaded) return;\n    const src = peek(this.#ctx.$state.source);\n    Promise.resolve().then(() => {\n      if (src !== peek(this.#ctx.$state.source) || !this.#player.isMediaLoaded) return;\n      this.#reset();\n      const duration = this.#player.duration;\n      this.#seekableRange = new TimeRange(0, duration);\n      const detail = {\n        provider: this,\n        duration,\n        buffered: new TimeRange(0, 0),\n        seekable: this.#getSeekableRange()\n      }, trigger = this.#createEvent(event);\n      this.#ctx.notify(\"loaded-metadata\", void 0, trigger);\n      this.#ctx.notify(\"loaded-data\", void 0, trigger);\n      this.#ctx.notify(\"can-play\", detail, trigger);\n      this.#onCanControlVolumeChange();\n      this.#onCanSeekChange(event);\n      const { volume, muted } = this.#ctx.$state;\n      this.setVolume(volume());\n      this.setMuted(muted());\n      this.#timeRAF.start();\n      this.#tracks.syncRemoteTracks(trigger);\n      this.#tracks.syncRemoteActiveIds(trigger);\n    });\n  }\n  #onCanControlVolumeChange() {\n    this.#ctx.$state.canSetVolume.set(this.#player.canControlVolume);\n  }\n  #onCanSeekChange(event) {\n    const trigger = this.#createEvent(event);\n    this.#ctx.notify(\"stream-type-change\", this.#getStreamType(), trigger);\n  }\n  #getStreamType() {\n    const streamType = this.#player.mediaInfo?.streamType;\n    return streamType === chrome.cast.media.StreamType.LIVE ? this.#player.canSeek ? \"live:dvr\" : \"live\" : \"on-demand\";\n  }\n  #onCurrentTimeChange() {\n    if (this.#reloadInfo) return;\n    const currentTime = this.#player.currentTime;\n    if (currentTime === this.#currentTime) return;\n    this.#ctx.notify(\"time-change\", currentTime);\n    if (currentTime > this.#played) {\n      this.#played = currentTime;\n      this.#onProgress();\n    }\n    if (this.#ctx.$state.seeking()) {\n      this.#ctx.notify(\"seeked\", currentTime);\n    }\n    this.#currentTime = currentTime;\n  }\n  #onDurationChange(event) {\n    if (!this.#player.isMediaLoaded || this.#reloadInfo) return;\n    const duration = this.#player.duration, trigger = this.#createEvent(event);\n    this.#seekableRange = new TimeRange(0, duration);\n    this.#ctx.notify(\"duration-change\", duration, trigger);\n  }\n  #onVolumeChange(event) {\n    if (!this.#player.isMediaLoaded) return;\n    const detail = {\n      muted: this.#player.isMuted,\n      volume: this.#player.volumeLevel\n    }, trigger = this.#createEvent(event);\n    this.#ctx.notify(\"volume-change\", detail, trigger);\n  }\n  #onPausedChange(event) {\n    const trigger = this.#createEvent(event);\n    if (this.#player.isPaused) {\n      this.#ctx.notify(\"pause\", void 0, trigger);\n    } else {\n      this.#ctx.notify(\"play\", void 0, trigger);\n    }\n  }\n  #onProgress(event) {\n    const detail = {\n      seekable: this.#getSeekableRange(),\n      buffered: new TimeRange(0, this.#played)\n    }, trigger = event ? this.#createEvent(event) : void 0;\n    this.#ctx.notify(\"progress\", detail, trigger);\n  }\n  #onPlayerStateChange(event) {\n    const state = this.#player.playerState, PlayerState = chrome.cast.media.PlayerState;\n    this.#isIdle = state === PlayerState.IDLE;\n    if (state === PlayerState.PAUSED) return;\n    const trigger = this.#createEvent(event);\n    switch (state) {\n      case PlayerState.PLAYING:\n        this.#ctx.notify(\"playing\", void 0, trigger);\n        break;\n      case PlayerState.BUFFERING:\n        this.#ctx.notify(\"waiting\", void 0, trigger);\n        break;\n      case PlayerState.IDLE:\n        this.#timeRAF.stop();\n        this.#ctx.notify(\"pause\");\n        this.#ctx.notify(\"end\");\n        break;\n    }\n  }\n  #getSeekableRange() {\n    return this.#player.liveSeekableRange ? new TimeRange(this.#player.liveSeekableRange.start, this.#player.liveSeekableRange.end) : this.#seekableRange;\n  }\n  #createEvent(detail) {\n    return detail instanceof Event ? detail : new DOMEvent(detail.type, { detail });\n  }\n  #buildMediaInfo(src) {\n    const { streamType, title, poster } = this.#ctx.$state;\n    return new GoogleCastMediaInfoBuilder(src).setMetadata(title(), poster()).setStreamType(streamType()).setTracks(this.#tracks.getLocalTextTracks()).build();\n  }\n  #buildLoadRequest(src) {\n    const mediaInfo = this.#buildMediaInfo(src), request = new chrome.cast.media.LoadRequest(mediaInfo), savedState = this.#ctx.$state.savedState();\n    request.autoplay = (this.#reloadInfo?.paused ?? savedState?.paused) === false;\n    request.currentTime = this.#reloadInfo?.time ?? savedState?.currentTime ?? 0;\n    return request;\n  }\n  async #reload(paused, time) {\n    const src = peek(this.#ctx.$state.source);\n    this.#reloadInfo = { src, paused, time };\n    await this.loadSource(src);\n  }\n  #onNewLocalTracks() {\n    this.#reload(this.#player.isPaused, this.#player.currentTime).catch((error) => {\n    });\n  }\n}\n\nexport { GoogleCastProvider };\n"],"mappings":"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","names":["import_react","GoogleCastMediaInfoBuilder","#info","src","streamType","tracks","#buildCastTrack","title","poster","track","trackId","castTrack","GoogleCastTracksManager","#cast","#ctx","#onNewLocalTracks","cast","ctx","onNewLocalTracks","syncRemoteActiveIds","listenEvent","effect","#syncLocalTracks","#getLocalAudioTracks","#getRemoteTracks","type","#getRemoteActiveIds","activeIds","activeLocalAudioTrack","activeLocalTextTracks","remoteAudioTracks","remoteAudioTrack","#findRemoteTrack","remoteTextTracks","localTrack","remoteTextTrack","localTextTracks","untrack","event","localAudioTracks","#findLocalTrack","localAudioTrack","ListSymbol","localTextTrack","editRequest","#editTracksInfo","error","request","media","getCastSessionMedia","resolve","reject","localTracks","remoteTrack","#isMatch","remoteTracks","GoogleCastProvider","createScope","#player","#tracks","#currentSrc","#state","#currentTime","#played","#seekableRange","TimeRange","#timeRAF","RAFLoop","#onAnimationFrame","#playerEventHandlers","#reloadInfo","#isIdle","player","getCastContext","getCastSession","hasActiveCastSession","#attachCastContextEventListeners","#attachCastPlayerEventListeners","listenCastContextEvent","#onCastStateChange","Event2","handlers","#onMediaLoadedChange","#onCanControlVolumeChange","#onCanSeekChange","#onDurationChange","#onVolumeChange","#onPausedChange","#onProgress","#onPlayerStateChange","handler","#onRemotePlayerEvent","keysOf","onDispose","#reload","muted","time","volume","#resumeSession","loadRequest","#buildLoadRequest","errorCode","getCastErrorMessage","#reset","#endSession","resumeSessionEvent","DOMEvent","savedState","localState","remotePlaybackLoader","#disconnectFromReceiver","#onCurrentTimeChange","data","castState","state","detail","trigger","#createEvent","peek","duration","#getSeekableRange","#getStreamType","currentTime","PlayerState","#buildMediaInfo","mediaInfo","paused"]}